<?phprequire_once __DIR__ . '/../../../vendor/autoload.php';use PhpAmqpLib\Connection\AMQPStreamConnection;$connection = new AMQPStreamConnection('localhost', 5672, 'guest', 'guest');$channel = $connection->channel();$channel->queue_declare('task_queue', false, true, false, false);echo ' [*] Waiting for the messages', "\n";$callback = function($msg){    echo " [x] Received ", $msg->body, "\n";    var_dump(json_decode($msg->body, true));    echo " [x] Done", "\n";    $msg->delivery_info['channel']->basic_ack($msg->delivery_info['delivery_tag']);    $array_values = json_decode($msg->body, true);    //    $servername = "localhost";    $username = "root";   $password = "magentodbpass";   $dbname = "lsapp";    try {        $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);        // set the PDO error mode to exception        $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);        foreach ($array_values as $item_id=>$item_qty)        {            $sql = "INSERT INTO `pr_producers` (`PK_pr_producers`, `FK_pr_regions`, `firstname`, `lastname`, `family_members`, `adress`, `phone_number`, `location`, `lat`, `statement`, `id`) VALUES ('', '', '', '', '', '', '', '', '', '', NULL);";        }//        $sql = "INSERT INTO pr_producers (firstname,lng,FK_pr_regions,statement,amily_members,PK_pr_producer,adress,phone_number,location,latlastname)//    VALUES ( $array_values)";//        $sql = "INSERT INTO pr_producers (`PK_pr_producers`, `FK_pr_regions`, `firstname`, `lastname`, `gender`, `prod_id_no`, `partner_name`, `prod_partner_id_no`, `producer_birth_date`, `family_members`, `children_younger_15_years`, `adress`, `location`, `zip_code`, `phone_number`, `email`, `social_media_contact`, `lat`, `lng`, `statement`, `familiar_agriculture`, `comment`, `sisleg`, `registro_municipal`, `lot_no`, `gleba_no`, `NDAP`, `ics_register_date`, `preparation_demeter_first_application`, `contract_valid_until`, `contract_date`, `risk_assessment_1`, `risk_assessment_2`, `risk_assessment_3`, `risk_assessment_4`, `risk_assessment_5`, `risk_assessment_6`, `risk_assessment_7`, `risk_north`, `risk_south`, `risk_west`, `risk_east`, `public_record`, `main_products`, `GAP_weed_control`, `GAP_weed_control_comment`, `GAP_weed_control_method`, `GAP_weed_control_method_comment`, `GAP_pruning`, `GAP_pruning_comment`, `GAP_planting_density`, `GAP_planting_density_comment`, `GAP_prevention_of_erosion`, `GAP_prevention_of_erosion_comment`, `GAP_mgmt_of_organic_wastes`, `GAP_mgmt_of_organic_wastes_comment`, `GAP_weeding_and_soil_preparation`, `GAP_weeding_and_soil_preparation_comment`, `GAP_phytosanitary_treatment`, `GAP_phytosanitary_treatment_comment`, `GAP_environmental_protection`, `GAP_environmental_protection_comment`, `SOC_typoe_of_workers`, `SOC_typoe_of_workers_comment`, `SOC_organic_know_how`, `SOC_organic_know_how_comment`, `SOC_meeting_participation`, `SOC_meeting_participation_comment`, `SOC_mgmt_of_documentation`, `SOC_mgmt_of_documentation_comment`, `PH_product_sorting`, `PH_product_sorting_comment`, `PH_no_conventional_mixed`, `PH_no_conventional_mixed_comment`, `PH_packaging`, `PH_packaging_comment`, `PH_stock_seperation`, `PH_stock_seperation_comment`, `PH_correct_labelling`, `PH_correct_labelling_comment`, `FK_sy_users`, `date_added`, `date_changed`, `id`)//       //  Values ( array_values($msg->body))";        // use exec() because no results are returned        $conn->exec($sql);        echo "New record created successfully";    }    catch(PDOException $e)    {        echo $sql . "<br>" . $e->getMessage();    }    $conn = null;};$channel->basic_qos(null, 1, null);$channel->basic_consume('task_queue', '', false, false, false, false, $callback);while(count($channel->callbacks)) {    $channel->wait();}$channel->close();$connection->close();